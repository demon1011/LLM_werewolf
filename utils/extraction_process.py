import re

def kill_vote_extr(llm,input_content):
    prompt='''请根据狼人的投票内容提取他的投票消灭的对象，如果玩家指定了被消灭玩家的编号，以类似以下格式返回结果:{'是否消灭':'是','消灭玩家':4}；如果没有指明唯一的消灭对象，则认为投了弃权票，以这种格式返回结果:{'是否消灭':'否'}。
    例1：由于提供的狼人【投票结果】中并未包含具体的投票对象，而是描述了一般情况下狼人的游戏策略，因此无法直接提取出{'是否消灭':'是','消灭玩家':x}这样的信息。如果需要提取实际的投票信息，请提供包含具体投票目标的对话内容。
    【提取结果】:{'是否消灭':'否'}
    例2：狼人的【投票结果】:【投票结果】: 4号玩家

根据游戏记录，4号玩家的积极参与和5号玩家的验人结果已经引起了注意，这可能意味着他正在积极寻找狼人。如果他是神职，他的出局将立即揭示他的身份，这可能会导致狼人阵营的暴露。6号玩家的沉默虽然可疑，但如果我们今晚投票给他，如果他不是守卫，那么我们可能会失去一个潜在的狼人，而不会立即暴露狼人身份。

考虑到这些因素，我选择投票给4号玩家。如果他是神职，他的出局将消除一个对狼人威胁较大的角色，而且他的死亡可能会引发人类阵营的混乱，因为他们会试图找出是谁杀了他。如果4号是村民，那么我们只是提前淘汰了一个可能的威胁，而不会立即暴露狼人身份。这种策略旨在制造更多混乱，同时降低我们被发现的风险。
    【提取结果】:{'是否消灭':'是','消灭玩家':4}
    例3：狼人的【投票结果】:【投票结果】: 0号玩家
    【提取结果】:{'是否消灭':'是','消灭玩家':0}
    #####################################
    当前狼人的【投票结果】:%s。
    【提取结果】:
    '''%(input_content)
    result=llm.call_with_messages(prompt)
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    if kill_res['是否消灭']=='是':
        return kill_res['消灭玩家']
    else:
        return -1
def day_vote_extr(llm,input_content):
    prompt='''请根据当前玩家的投票内容提取他的投票消灭的对象，如果玩家指定了被消灭玩家的编号，以类似以下格式返回结果:{'是否消灭':'是','消灭玩家':4}；如果没有指明唯一的消灭对象，则认为投了弃权票，以这种格式返回结果:{'是否消灭':'否'}。
    例1：玩家的【投票结果】:在白天的讨论中，虽然5号玩家被多次提及，我需要保持谨慎，避免过早暴露自己。0号玩家在发言中特别提到了我，这让我有些怀疑他的动机。狼人可能会试图引导村民对我产生怀疑，以转移对其他狼人成员的注意力。因此，我选择不投票给5号玩家，而是将注意力转向0号玩家，他的发言和对我行为的关注让我觉得他可能是一个狼人。当然，这只是一个策略，我需要在接下来的讨论中收集更多信息来确认我的猜测。
    【提取结果】:{'是否消灭':'是','消灭玩家':0}
    例2：玩家的【投票结果】:由于目前没有确凿的证据指向某个玩家是狼人，而且1号玩家的发言虽然试图展现新人的紧张，但也有玩家表示了他的警觉，我作为女巫需要更加谨慎。在这种情况下，我倾向于观察和收集更多的信息，避免在初期就草率投票。因此，我选择弃权，不进行投票。这样可以避免因误判而失去一位可能的队友，同时也能保持游戏的平衡，等待更多的线索出现。当然，如果其他玩家提供了有力的证据，我会重新考虑我的立场。
    【提取结果】:{'是否消灭':'否'}
    #####################################
    当前玩家的【投票结果】:%s。
    【提取结果】:
    '''%(input_content)
    print("决策过程:")
    result=llm.call_with_messages(prompt)
    print("投票文本:")
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    if kill_res['是否消灭']=='是':
        return kill_res['消灭玩家']
    else:
        return -1
def seer_val_extr(llm,input_content):
    prompt='''请根据玩家的选择决策提取他的投票验证身份的对象，如果玩家明确指定了被验证玩家的编号，以类似以下格式返回结果:{'是否验证':'是','验证玩家':4};如果没有指明唯一的验证对象，则认为投了弃权票，以这种格式返回结果:{'是否验证':'否'}。
    例1：玩家的【选择决策】:由于这是游戏的第1个夜晚，没有之前的讨论和投票信息可供参考，所以选择验人可能会比较随机。不过，通常情况下，玩家会优先考虑验那些在开局时表现得异常活跃或者沉默不语的玩家，因为他们可能是试图掩饰自己身份的狼人。

另一种策略是验与自己关系最近的玩家，比如紧挨着你的2号玩家。这样可以初步了解你周围的安全情况。因此，作为1号玩家，我建议验2号玩家的身份。

【玩家编号】: 2
    【提取结果】:{'是否验证':'是','验证玩家':2}
    例2：在这种情况下，由于是游戏的第一夜，还没有足够的信息来判断谁最可疑。因此，选择查验的对象通常是随机的，或者基于初步观察和直觉。一种常见的策略是优先查验有特殊身份的玩家，比如女巫或猎人，但如果无法确定，可以选择任意一个玩家开始。

为了给出一个具体的答案，我将选择查验一个玩家作为示例，但请注意，在实际游戏中这一步往往是基于直觉或随机选择的，因为还没有任何线索指向特定的玩家。

【玩家编号】: 1
    【提取结果】:{'是否验证':'是','验证玩家':1}
    例3：【玩家编号】: 3

【理由】:
在首夜，由于没有足够的信息来判断哪个玩家更可疑，选择查验一个玩家需要结合一些常见的狼人杀策略。通常，狼人可能会选择较为活跃或看起来像是神职人员的玩家作为目标，以尽早削弱人类阵营的关键力量。

选择查验3号玩家的原因如下：
1. **随机性与平衡**：在没有任何线索的情况下，选择中间编号的玩家（如3号）可以避免过于明显的模式，防止被狼人识破。
2. **观察后续行为**：通过查验3号玩家，可以在接下来的白天讨论中仔细观察其言行举止，以及其他玩家对3号的态度，从而获取更多线索。
3. **分散风险**：如果3号是狼人，预言家可以立即提供有价值的信息；如果是人类，也可以为后续的推理提供更多依据。

总之，在首夜低调行事、秘密验人的同时，保持对所有玩家的观察，以便在白天讨论时能够更好地分析局势并作出决策。
    【提取结果】:{'是否验证':'是','验证玩家':3}
    #####################################
    当前玩家的【选择决策】:%s。
    【提取结果】:
    '''%(input_content)
    result=llm.call_with_messages(prompt)
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    if kill_res['是否验证']=='是':
        return kill_res['验证玩家']
    else:
        return -1
def witch_poison_extr(llm,input_content):
    prompt='''请根据当前玩家的毒药决策提取他的决定用毒药消灭的对象，如果玩家确定要使用毒药，并明确指定了被消灭玩家的编号，以类似以下格式返回结果:{'是否消灭':'是','消灭玩家':4}；如果没有指明唯一的消灭对象，则认为不使用毒药消灭玩家，以这种格式返回结果:{'是否消灭':'否'}。
    例1：玩家的【毒药决策】:根据当前的局面，我想用毒药毒死3号玩家。
    【提取结果】:{'是否消灭':'是','消灭玩家':3}
    例2：玩家的【毒药决策】:2号玩家。
    【提取结果】:{'是否消灭':'是','消灭玩家':2}
    例3:在目前的情况下，由于信息有限，我没有足够的理由直接使用毒药。因此，我的初步决定是**不使用毒药**，以待更多信息出现或出现更明确的狼人目标。然而，如果游戏中出现明显的狼人行为或有玩家的行为让我高度怀疑其为狼人，我会重新考虑这个决策。
    【提取结果】:{'是否消灭':'否'}
    #####################################
    当前玩家的【毒药决策】:%s。
    【提取结果】:
    '''%(input_content)
    result=llm.call_with_messages(prompt)
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    if kill_res['是否消灭']=='是':
        return kill_res['消灭玩家']
    else:
        return -1
def witch_antidote_extr(llm,input_content):
    prompt='''请根据当前玩家的解药决策提取是否解救的决定，如果玩家明确表示愿意使用解药，以类似以下格式返回结果:{'是否解救':'是'}；否则玩家没有明确表示要使用解药，以下面格式返回结果:{'是否解救':'否'}。
    例1：玩家的【解药决策】:根据当前的局面，我不想用解药救下这个人。
    【提取结果】:{'是否解救':'否'}
    例2：玩家的【解药决策】:救。
    【提取结果】:{'是否解救':'是'}
    #####################################
    当前玩家的【解药决策】:%s。
    【提取结果】:
    '''%(input_content)
    result=llm.call_with_messages(prompt)
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    return kill_res['是否解救']
def hunter_vegence_extr(llm,input_content):
    prompt='''请根据当前玩家的猎枪决策提取他的决定用猎枪复仇消灭的对象，如果玩家确定要使用猎枪，并明确指定了被消灭玩家的编号，以类似以下格式返回结果:{'是否消灭':'是','消灭玩家':4}；如果没有指明唯一的消灭对象，则认为不使用猎枪消灭玩家，以这种格式返回结果:{'是否消灭':'否'}。
    例1：玩家的【猎枪决策】:根据当前的局面，我想用猎枪带走3号玩家。
    【提取结果】:{'是否消灭':'是','消灭玩家':3}
    例2：玩家的【猎枪决策】:由于缺乏具体信息，我只能做出一个假设性的决定。在实际情况中，我会需要更多的游戏进程信息来进行决策。如果我是被狼人直接杀害的，而我之前没有任何信息，我的【猎枪决策】可能是不开枪，因为这样更谨慎，避免误伤好人。但如果是游戏实际进行中，这个决定应基于实际发生的事件和玩家的言行。
    【提取结果】:{'是否消灭':'否'}
    #####################################
    当前玩家的【猎枪决策】:%s。
    【提取结果】:
    '''%(input_content)
    result=llm.call_with_messages(prompt)
    result=re.search(r'\{(.*?)\}', result)[0]
    print(result)
    kill_res=eval(result)
    if kill_res['是否消灭']=='是':
        return kill_res['消灭玩家']
    else:
        return -1